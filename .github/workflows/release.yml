name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
            fetch-depth: 0 

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Build Windows binaries
      run: .\build-windows.ps1

    - name: Create Windows x64 archive
      run: Compress-Archive -Path dist-windows\x64\* -DestinationPath ffpb-windows-x64.zip

    - name: Create Windows ARM64 archive
      run: Compress-Archive -Path dist-windows\arm64\* -DestinationPath ffpb-windows-arm64.zip

    - name: Upload Windows x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffpb-windows-x64
        path: ffpb-windows-x64.zip

    - name: Upload Windows ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffpb-windows-arm64
        path: ffpb-windows-arm64.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
            fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Make build script executable
      run: chmod +x build-linux.sh

    - name: Build Linux binaries
      run: ./build-linux.sh

    - name: Create Linux x64 archive
      run: tar -czf ffpb-linux-x64.tar.gz -C dist-linux/x64 .

    - name: Upload Linux x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffpb-linux-x64
        path: ffpb-linux-x64.tar.gz

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
            fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Import signing certificate
      if: ${{ secrets.APPLE_CERTIFICATE_BASE64 != '' }}
      env:
        APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      run: |
        # Create certificate file
        echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
        
        # Create temporary keychain
        security create-keychain -p "$RUNNER_TEMP" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$RUNNER_TEMP" build.keychain
        
        # Import certificate
        security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$RUNNER_TEMP" build.keychain
        
        # Clean up certificate file
        rm certificate.p12
        
        # Find and export signing identity for build script
        IDENTITY=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -1 | grep -o '"[^"]*"' | tr -d '"')
        echo "APPLE_CODESIGN_IDENTITY=$IDENTITY" >> $GITHUB_ENV

    - name: Make build script executable
      run: chmod +x build-macos.sh

    - name: Build, sign, and notarize macOS binary
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Build with signing, add notarization if credentials are available
        if [ -n "$APPLE_ID" ] && [ -n "$APPLE_APP_PASSWORD" ] && [ -n "$APPLE_TEAM_ID" ]; then
          ./build-macos.sh --notarize
        else
          ./build-macos.sh
        fi

    - name: Create macOS archive
      run: tar -czf ffpb-macos-universal.tar.gz -C dist .

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ffpb-macos-universal
        path: ffpb-macos-universal.tar.gz

  release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
            fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate release tag
      id: tag
      run: |
        echo "tag=v$(date +'%Y.%m.%d')-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          artifacts/ffpb-windows-x64/ffpb-windows-x64.zip
          artifacts/ffpb-windows-arm64/ffpb-windows-arm64.zip
          artifacts/ffpb-linux-x64/ffpb-linux-x64.tar.gz
          artifacts/ffpb-macos-universal/ffpb-macos-universal.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}